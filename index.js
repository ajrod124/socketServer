// Generated by CoffeeScript 1.12.3
(function() {
  var SocketServer, _, cache, clients, closeComms, express, path, readyForExchange, request, server, updateLogs, wss;

  express = require('express');

  SocketServer = require('ws').Server;

  request = require('request');

  path = require('path');

  _ = require('underscore');

  cache = require('memory-cache');

  server = express().use((function(_this) {
    return function(req, res) {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
      return res.sendFile(path.join(__dirname, 'index.html'));
    };
  })(this)).listen(3000, (function(_this) {
    return function() {
      return console.log('Listening on port 3000');
    };
  })(this));

  wss = new SocketServer({
    server: server
  });

  clients = [];

  wss.on('connection', (function(_this) {
    return function(ws) {
      console.log('Client connected');
      clients.push(ws);
      ws.onmessage = function(e) {
        var client, i, j, k, len, len1, len2, obj, results, results1;
        obj = JSON.parse(e.data);
        switch (obj.type) {
          case 'chatEvent':
            for (i = 0, len = clients.length; i < len; i++) {
              client = clients[i];
              client.send(JSON.stringify(obj));
            }
            return updateLogs(obj);
          case 'exchangeCandidates':
            results = [];
            for (j = 0, len1 = clients.length; j < len1; j++) {
              client = clients[j];
              results.push(client.send(JSON.stringify(obj)));
            }
            return results;
            break;
          case 'exchangeDescription':
            results1 = [];
            for (k = 0, len2 = clients.length; k < len2; k++) {
              client = clients[k];
              results1.push(client.send(JSON.stringify(obj)));
            }
            return results1;
            break;
          case 'startStream':
            ws.id = 'streamer';
            cache.put('stream', true);
            return readyForExchange();
          case 'endStream':
            ws.id = null;
            cache.del('stream');
            return closeComms();
          case 'startView':
            ws.id = 'viewer';
            cache.put('viewer', true);
            return readyForExchange();
          case 'endView':
            ws.id = null;
            cache.del('viewer');
            return closeComms();
          case 'isStreamActive':
            return ws.send(JSON.stringify({
              type: 'isStreamActive',
              answer: cache.get('stream')
            }));
          case 'hasViewer':
            return ws.send(JSON.stringify({
              type: 'hasViewer',
              answer: cache.get('viewer')
            }));
          default:
            return console.error('Unrecognized message type');
        }
      };
      return ws.on('close', function() {
        if (ws.id === 'streamer') {
          cache.del('stream');
        }
        if (ws.id === 'viewer') {
          cache.del('viewer');
        }
        console.log('Client disconnected');
        return clients = _.without(clients, ws);
      });
    };
  })(this));

  readyForExchange = function() {
    var client, i, len, results;
    if (cache.get('stream') && cache.get('viewer')) {
      results = [];
      for (i = 0, len = clients.length; i < len; i++) {
        client = clients[i];
        results.push(client.send(JSON.stringify({
          type: 'readyForExchange'
        })));
      }
      return results;
    }
  };

  closeComms = function() {
    var client, i, len, results;
    results = [];
    for (i = 0, len = clients.length; i < len; i++) {
      client = clients[i];
      results.push(client.send(JSON.stringify({
        type: 'closeComms'
      })));
    }
    return results;
  };

  updateLogs = function(obj) {
    return request({
      method: 'POST',
      url: 'https://fathomless-retreat-96857.herokuapp.com/updateLog/',
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      },
      form: {
        name: obj.name,
        userId: obj.userId,
        time: obj.time,
        message: obj.message
      }
    }, function(err, res, body) {
      if (err) {
        return console.error(err);
      } else {
        return console.log(res.body);
      }
    });
  };

}).call(this);
